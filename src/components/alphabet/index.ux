<template>
  <div class="qaui-wrap">
    <div class="qaui-wrap-nav">
      <block for="{{compIndexs}}">
        <div class="qaui-wrap-nav-item {{currentIndex===$idx?'active':''}}" @click="handleScroll($idx, $item)">
          <text class="nav-item {{activeIndexItemStyle}} {{currentIndex===$idx?'active-text':''}}">{{ $item }}</text>
        </div>
      </block>
    </div>
    <div class="qaui-wrap-indicator" if="{{isShow}}">
      <div>
        <text>{{ currentLetterName }}</text>
      </div>
    </div>

    <list id="{{id}}" @scrollbottom="scrollbottom">
      <block for="{{data}}">
        <list-item
          type="alphabet-item"
          class="qaui-wrap-group"
          @disappear="handlerDisappear($idx)"
          @appear="handlerAppear($idx)"
        >
          <text class="qaui-wrap-group-index">{{ $item.index }}</text>
          <div class="qaui-wrap-group-child">
            <block for="{{$item.child}}">
              <text class="qaui-wrap-group-child-text" @click="handleClick($item)">{{ $item.text }}</text>
            </block>
          </div>
        </list-item>
      </block>
    </list>
  </div>
</template>
<script>
import vibrator from "@system.vibrator";
export default {
  props: {
    id: {},
    data: {},
    indexcolor: {
      type: String,
      default: "#fff",
    },
    indexbgcolor: {
      type: String,
      default: "#2878ff",
    },
  },

  data() {
    return {
      compIndexs: [], //存储字母
      currentIndex: 0,
      currentLetterName: "", //当前字母
      isShow: false,
      indexArr: [],
      isTab: false, //是否有过切换字母动作,
    };
  },

  onInit() {
    var arr = [];
    this.data.forEach((item) => {
      arr.push(item.index);
    });
    this.compIndexs = arr;
    this.currentLetterName = arr[0];
  },

  handleClick(item) {
    this.$emit("getItem", {
      obj: item,
    });
  },

  handleScroll(index, item) {
    this.isTab = true;
    this.currentIndex = index;
    this.currentLetterName = item;
    this.$element("alphabet").scrollTo({ index: index });
    this.LetterShow();

    vibrator.vibrate({
      mode: "short",
    });
  },

  LetterShow() {
    if (this.timer) {
      clearTimeout(this.timer);
      this.timer = null;
    }
    this.isShow = true;
    this.timer = setTimeout(() => {
      this.isShow = false;
    }, 3000);
  },

  handlerDisappear(index) {
    this.indexArr.shift();
    this.tabCurrent();

    if (this.currentIndex === index) {
      this.currentIndex = index + 1;
      this.currentLetterName = this.compIndexs[this.currentIndex];
      this.LetterShow();
    }
  },

  handlerAppear(index) {
    this.indexArr.push(index);
    this.tabCurrent();
    if (index === this.currentIndex - 1) {
      this.currentIndex = index < 0 ? 0 : index;
      this.currentLetterName = this.compIndexs[this.currentIndex];
      this.LetterShow();
    }
  },

  tabCurrent() {
    var arr = this.indexArr;
    if (this.isTab & (this.currentIndex > arr[0])) {
      this.isTab = false;
      this.currentIndex = arr[arr.length - 1];
      this.currentLetterName = this.compIndexs[this.currentIndex];
      this.LetterShow();
    }
  },
};
</script>

<style lang="less">
@import "../common.less";
.qaui-wrap {
  &-group {
    flex-direction: column;
    &-index {
      padding-left: 33px * @ratio;
      font-weight: bold;
      line-height: 10px * 2.5;
      border-color: #cccccc;
      background-color: #f8f9fb;
      border-bottom-width: 0.5px * @ratio;
      font-size: 12px * @ratio;
    }
    &-child {
      flex-direction: column;
      &-text {
        padding-left: 33px * @ratio;
        background-color: #ffffff;
        line-height: 16px * 2.5;
        border-color: #ccc;
        border-bottom-width: 0.5px * @ratio;
        font-size: 12px * @ratio;
      }
    }
  }
  &-nav {
    position: fixed;
    top: 120px * @ratio;
    right: 6px * @ratio;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    &-item {
      width: 15px * @ratio;
      height: 16px * @ratio;
      align-items: center;
      justify-content: center;
      text {
        font-size: 12px * @ratio;
      }
    }

    .active {
      width: 16px * @ratio;
      height: 16px * @ratio;
      background-color: #2878ff;
      border-radius: 50%;
    }

    .nav-item {
      color: #333333;
    }

    .active-text {
      color: #fff;
    }
  }
  &-indicator {
    width: 50px * @ratio;
    height: 50px * @ratio;
    position: fixed;
    top: 103px * @ratio;
    left: 269px * @ratio;
    background-color: #d8d8d8;
    border-radius: 50%;
    align-items: center;
    justify-content: center;

    text {
      color: #ffffff;
      font-size: 30px * @ratio;
      font-weight: bold;
    }
  }
}
</style>
